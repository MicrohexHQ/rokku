airlock {
    # Default interface and port to listen on.
    http {
        bind = ${?AIRLOCK_HTTP_BIND}
        port = ${?AIRLOCK_HTTP_PORT}
    }
    ranger {
        allow-list-buckets = ${?ALLOW_LIST_BUCKETS}
        allow-create-buckets = ${?ALLOW_CREATE_BUCKETS}
        user-domain-postfix = ${?AIRLOCK_RANGER_USER_DOMAIN_POSTFIX}
        enabled-audit = ${?AIRLOCK_RANGER_ENABLED_AUDIT}
    }
    storage.s3 {
        # Settings for reaching backing storage.
        host = ${?AIRLOCK_STORAGE_S3_HOST}
        port = ${?AIRLOCK_STORAGE_S3_PORT}

        admin {
            accesskey = ${?AIRLOCK_STORAGE_S3_ADMIN_ACCESSKEY}
            secretkey = ${?AIRLOCK_STORAGE_S3_ADMIN_SECRETKEY}
        }
        region = ${?AIRLOCK_STORAGE_S3_AWS_REGION}
        v2SignatureEnabled = ${?AIRLOCK_STORAGE_S3_V2_ENABLED}
    }

    sts {
        uri = ${?AIRLOCK_STS_URI}
        encodeSecret = ${?AIRLOCK_STS_ENCODE_SECRET}
    }

    atlas {
        enabled = ${?AIRLOCK_ATLAS_ENABLED}
    }

    kerberos {
        keytab = ${?AIRLOCK_KERBEROS_KEYTAB}
        principal = ${?AIRLOCK_KERBEROS_PRINCIPAL}
    }

    bucketNotificationEnabled = ${?AIRLOCK_BUCKET_NOTIFY_ENABLED}
}

kafka.producer {
    bootstrapServers = ${?AIRLOCK_KAFKA_BOOTSTRAP_SERVERS}
    protocol = ${?AIRLOCK_KAFKA_PROTOCOL}
    createTopic = ${?AIRLOCK_KAFKA_CREATE_TOPIC}
    deleteTopic = ${?AIRLOCK_KAFKA_DELETE_TOPIC}
    retries = ${?AIRLOCK_KAFKA_PRODUCER_RETRIES}
    backoff = ${?AIRLOCK_KAFKA_PRODUCER_BACKOFF}
    backoffMax = ${?AIRLOCK_KAFKA_PRODUCER_BACKOFFMAX}
    maxblock = ${?AIRLOCK_KAFKA_PRODUCER_MAXBLOCK}
}

akka {
    http {
        host-connection-pool.max-open-requests = ${?AIRLOCK_MAX_OPEN_REQUESTS}
        host-connection-pool.max-connections = ${?AIRLOCK_MAX_CONNECTIONS}
    }
}

